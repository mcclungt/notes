  ///////\\\\\\\\
 //////     \\\\\\
//////       /////
//////       /////                                          
//////                                                      ///////////////
//////                                                      ///////////////
//////                  /\\\\\\\\\    //// ////   /////             /////
//////     ////////    ////    \\\\   //////////////////          /////
//////      /////     /////////////   ////    ///    ///        /////
\\\\\\\    /////      \\\\            ////    ///    ///      /////
 \\\\\\\  /////        \\\\    ///    ////    ///    ///    ///////////////
  \\\\\\\/////          \////////     ////    ///    ///    ///////////////


---------
 Fakeweb
---------

- FakeWeb is a helper for faking web requests in Ruby. It works at a global level, without modifying code or writing extensive stubs.
- Restart the server every time you use fakeweb

FakeWeb.register_uri(:get, "http://exeample.com/", body: "Some text")

You can write regular expressions
- write custom statuses 
- specify content types 
- whitelist network connections
- get last request
- clear FakeWeb
- or use any as a verb(instead of get). 

---------
 TimeCop
---------

- Provides "time travel," "time freezing," and "time acceleration" capabilities
- Unified method to mock Time.now, Date.today, and DateTime.now in a single call

# Example

describe "the timing of a create" do
	before do
		Timecop.freeze(Time.local(1990))
	end

	after do
		Timecop.return
	end

	let(:color) { Color.create(name: 'jello') }

	it "should not allow old colors" do
		expect(color).to raise_error
	end
end

Long range time travel -
	Can change the concept of "now" for an indeterminate period of time.

---------
 Chronic
---------

- Natural date and time parser written for ruby

require 'chronic'

Time.now   #=> Sun Aug 27 23:18:25 PDT 2006

Chronic.parse('tomorrow')
  #=> Mon Aug 28 12:00:00 PDT 2006

Chronic.parse('monday', :context => :past)
  #=> Mon Aug 21 12:00:00 PDT 2006

Chronic.parse('this tuesday 5:00')
  #=> Tue Aug 29 17:00:00 PDT 2006

Chronic.parse('this tuesday 5:00', :ambiguous_time_range => :none)
  #=> Tue Aug 29 05:00:00 PDT 2006

Chronic.parse('may 27th', :now => Time.local(2000, 1, 1))
  #=> Sat May 27 12:00:00 PDT 2000

Chronic.parse('may 27th', :guess => false)
  #=> Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007

Chronic.parse('6/4/2012', :endian_precedence => :little)
  #=> Fri Apr 06 00:00:00 PDT 2012

Chronic.parse('INVALID DATE')
  #=> nil

--------
 devise
--------

- Auto generates controllers/views/routes for files
- Allows for easy implementation for authentication forms

gem 'devise'

rails generate devise:install

rails generate devise <modelname>      <----->      generates migration, model, and a route for <modelname>



- Also sets up error handling and password validation

- You can reconfigure views for different types of forms

----
 D3
----

- d3_rails gem provides d3.js and d3.min.js files to your asset pipeline

- add gem ;d3_rails', '~> 3.4.8' to gemfile and bundle install

$(document).ready(function() {
	var canvas = d3.select("#canvas");

	var updateElements = function(data) {
	var p = canvas.selectAll("p")
		.data(data)
		.text(String)
		.style("color", function(d, i) {
			return i % 2 ? "blue" : "red";
		})
		(tons more code here)
	}
})

-------
 spree
-------

$ gem install spree (39 dependent gems)

- spree sets up an entire demo e-commerce site on its own

- routes file has one line (mount Spree::Core::Engine => )

- schema is INSANE

- site runs very slow, assets need to be precompiled

- rake routes => soooo many routes

- spree can be good if you want an e-commerce site (well supported) but can be bloated

---------
 bourbon
---------

- library for sass (css with superpowers)

# bourbon syntax
@include box-shadow(0 2px 2px 0 rgba(0, 0, 0, 0.3));

# installing
gem 'bourbon', $ bundle install

- can add animations to your css, add grids, tints and much more

--------
 draper
--------

- adds an object oriented layer of presentation logic to your rails app

def show
	@article = Article.find(params[:id]).decorate
end

- ask Raghav, I don't get it

----------
 bluepill
----------

gem install bluepill

- keeps your daemons up while taking up as few resources as possible.

--------------
 coffeescript
--------------

- Easier way to write javascript in a ruby-ish syntax

- When you find an error, it will display an error like ruby with the line