RRRRR     A     I   L      ZZZZZZZ
R   R    A A    I   L           Z
RRRR    AAAAA   I   L         Z
R  R    A   A   I   L       Z
R   R   A   A   I   LLLLL  ZZZZZZZ

TTTTT     A     L      K   K   ZZZZZZZ
  T      A A    L      K K          Z
  T     AAAAA   L      KK         Z
  T     A   A   L      K K      Z
  T     A   A   LLLLL  K   K   ZZZZZZZ

---------
 link_to
---------

 <% link_to +"Service",
		new.source.path(:account_id => acct:id)
									 (:if => current_user) %>

		link_to_if(current_user, "Bananas", "banana_path")

----------
 form_for
----------

-Creates a form that can use/edit data from the controller

<ul>
<%= form_for @post do |f| %>
	<li>
		<%= f.label :title %>
		<%= f.text_field :title %>
	</li>
	<li>
		<%= f.label :body %>
		<%= f.text_field :body %>
	</li>
	<li>
		<%= f.submit %>
	</li>
	<% end %>
</ul>

-as: - calls a prefix for a route

--------------------
 virtual attributes
--------------------

~ giving your forms flexibility when transferring data between the model and the db ~

#MODEL:
def fullname(name)
	name.split("")      #splits the first name and last name into two strings
end

def full
	self.first_name = fullname[0]
end

other example: validations (in the model)

-------------------
 strong parameters
-------------------

sets whitelist and/or blacklist for allowed parameters

#CONTROLLER
person_params = Params.require(:person).permit(:name,:address)

Person.create(person_params)

----------
 sessions
----------

- purpose of sessions is to create state in a stateless environment
- sessions cease to exist after the browser is closed
- sessions can be preserved by the use of a cookie
- three ways sessions are stored
	- local storage on the client   -   default, preferred version
	- stored in ruby's cache        -   can be passed between all aspects of the server, but is very short lived
	- as a database object          -   "permanent", however it takes space on the server and takes time to access

----------------
 custom routing
----------------

~ see rails docs on custom routing ~

            route                                                                                    rake routes

	root 'welcome#index'                                                   <------>   root GET  /  welcome#index
	get 'products/:id' -> 'catalog#view'                                   <------>        GET  /products/:id(format)
	get 'photos/:id', to: 'photos#show', constraints {id: /[A-Z]\d{5}/}    <------>        GET  /photos/:id(format)   (only within constraints)
	resources :photos                                                      <------>              (all seven routes)
	resource :photo                                                        <------>     	(no index, singular, but otherwise same as plural)
	resources :user do
	  resources :photo                                                     <------>           (sets up routes i.e. user/:id/photos/etc.)
	end
	resources :wines, path: "vino"                                         <------>   root GET  /vino/etc... (renames all to vino)

----------------------------
 url helpers (url and path)
----------------------------

www.google.com/mail
|____________||___|
    DOMAIN     PATH
|_________________|
        URL

CREATE  GET        '/posts/new'       => posts#new,   as: new_posts.path      --------->      returns '/posts/new'
        POST       '/posts'           => posts#create

READ    GET        '/posts/:id'       => posts#show,  as: post_path
        GET        '/posts'           => posts#index, as: posts_path
                                                        ^------ note plural       
UPDATE  GET        '/posts/:id/edit'  =>              as: edit_post_path      --------->      new_post_path
        PUT/PATCH  '/posts/:id'       =>                                                      new_post_url

DELETE  DELETE     '/posts/:id'       =>

-------------------
 named routes (as)
-------------------

resources :users                         -> gives you a large set of routes

get '/profile => 'users#show'            -> get /profile(.:format) users#show

get '/profile' => 'users#show' as: home  -> get /profile(.:format) users#show  (home_path will get this route)

-------------------
 refactoring views
-------------------

<div id="banner">
	<a href="www.ads.com"><img src="/imgs/banner.png"></a>
</div>

<h1>Products</h1>

<p> Here are a few of our fine products:</p>


<footer>
	<p>Email: <a href="mailto:products@services.edu">products@services.edu</a></p>
</footer>

								--------


<%= render "shared/ad_banner" %> ----> _ad_banner.html.erb
 
<h1>Products</h1>
 
<p>Here are a few of our fine products:</p>

<%= render "shared/footer" %>	-------> _footer.html.erb


								--------


<%= render "shared/ad_banner" %>

<%= render "shared/footer" %> -------> _footer.html.erb now
																			contains products header
																			and paragraph

------
 HAML
------

- markup language used to describe html


 ~ HTML ~
<section class="container">
  <h1><%= post.title %></h1>
  <h2><%= post.subtitle %></h2>
  <div class="content">
    <%= post.content %>
  </div>
</section>



 ~ HAML ~ 
%section.container
  %h1= post.title
  %h2= post.subtitle
  .content
    = post.content    

------------
 Turbolinks
------------

- add to gemfile, require in environments 'turbolinks'

- can change route and body without reloading location

- by default applies to every link on your page (unless <a href='/' data-no-turbolink >)

- doesn't work with jquery unless you bind: 
$(document).ready({
	$(function(){
	initPage();
	});
	$(window).bind('page:change', function(){
		initPage();
	});
});
	because jquery works on page load

--------------
 environments
--------------

Three environments:
- development      -> full error messages
- production       -> minifies all assets (single block of code) and concatenates html/css
- test

- each can have .rb files in config/environments that configure each environment

- config/application.rb has all default configs

p ENV['RAILS_ENV'] -> will show your environment

ex. config.colorize_logging = true -> log will now be colorized

